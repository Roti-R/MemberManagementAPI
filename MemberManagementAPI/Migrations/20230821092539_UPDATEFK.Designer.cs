// <auto-generated />
using System;
using MemberManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemberManagementAPI.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230821092539_UPDATEFK")]
    partial class UPDATEFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MemberManagementAPI.Data.Account", b =>
                {
                    b.Property<Guid>("MemberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MemberID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Member", b =>
                {
                    b.Property<Guid>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberID");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Organization", b =>
                {
                    b.Property<Guid>("OrgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrgID");

                    b.HasIndex("ParentID");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.OrganizationManager", b =>
                {
                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ManagerID", "OrgID");

                    b.HasIndex("OrgID");

                    b.ToTable("Management");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Account", b =>
                {
                    b.HasOne("MemberManagementAPI.Data.Member", "Member")
                        .WithOne("Account")
                        .HasForeignKey("MemberManagementAPI.Data.Account", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Organization", b =>
                {
                    b.HasOne("MemberManagementAPI.Data.Organization", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.OrganizationManager", b =>
                {
                    b.HasOne("MemberManagementAPI.Data.Member", "Manager")
                        .WithMany("OrganizationManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberManagementAPI.Data.Organization", "Organization")
                        .WithMany("OrganizationManagers")
                        .HasForeignKey("OrgID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Member", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("OrganizationManagers");
                });

            modelBuilder.Entity("MemberManagementAPI.Data.Organization", b =>
                {
                    b.Navigation("ChildOrganizations");

                    b.Navigation("OrganizationManagers");
                });
#pragma warning restore 612, 618
        }
    }
}
